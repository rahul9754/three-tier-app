
trigger:
- main

resources:
- repo: self

variables:
  imgRepoVote: vote
  imgRepoWorker: worker
  imgRepoResult: result
  tag: '$(Build.BuildId)'

stages:
- stage: buildPush
  displayName: Build & Push image
  jobs:
  - job: buildPush
    displayName: Build & Push image
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build & Push Result image
      inputs:
        containerRegistry: 'acr-auth-docker-reg'
        repository: '$(imgRepoResult)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/result/Dockerfile'
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Build & Push Worker image
      inputs:
        containerRegistry: 'acr-auth-docker-reg'
        repository: '$(imgRepoWorker)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/worker/Dockerfile'
        tags: |
          $(Build.BuildId)
          
    - task: Docker@2
      displayName: Build & Push Vote image
      inputs:
        containerRegistry: 'acr-auth-docker-reg'
        repository: '$(imgRepoVote)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/vote/Dockerfile'
        tags: |
          $(Build.BuildId)
          
    # Adding task to publish our k8s manifests files, so that in next stage 
    # pipeline do not access my repo
    # here 's' in targetpath is equivalent to source dir
    - task: PublishPipelineArtifact@1
      displayName: Publishing k8s manifests
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/k8s-specifications'
        artifact: 'manifests'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: Deploy
  dependsOn: buildPush
  jobs:
    - deployment: Deploy
      displayName: Deploy to AKS
      environment: 'k8s-app.default'
      variables:
        acrUrl: 'rahul9270.azurecr.io'
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadPipelineArtifact@2
              displayName: downloading k8s manifests
              inputs:
                buildType: 'current'
                artifactName: 'manifests'
                targetPath: '$(Pipeline.Workspace)/manifests'

            #using azure rm as connection type for storageclass
            - task: KubernetesManifest@1
              displayName: deploying storage class and pv
              inputs:
                action: 'deploy'
                connectionType: 'azureResourceManager'
                azureSubscriptionConnection: 'for-storageclass-k8s'
                azureResourceGroup: 'aks_tf_rg'
                kubernetesCluster: 'aks-three-tier-app'
                namespace: 'default'
                manifests: |
                  $(Pipeline.Workspace)/manifests/db-storageclass.yaml
                  $(Pipeline.Workspace)/manifests/db-pvc.yaml
            
            - task: KubernetesManifest@1
              displayName: deploying db and redis
              inputs:
                action: 'deploy'
                namespace: 'default'
                manifests: |
                  $(Pipeline.Workspace)/manifests/redis-deployment.yaml
                  $(Pipeline.Workspace)/manifests/redis-service.yaml
                  $(Pipeline.Workspace)/manifests/db-secret.yaml
                  $(Pipeline.Workspace)/manifests/db-service.yaml
                  $(Pipeline.Workspace)/manifests/db-statefulset.yaml


            - task: KubernetesManifest@1
              displayName: deploying result
              inputs:
                action: 'deploy'
                namespace: 'default'
                manifests: |
                  $(Pipeline.Workspace)/manifests/result-deployment.yaml
                  $(Pipeline.Workspace)/manifests/result-service.yaml
                containers: '$(acrUrl)/$(imgRepoResult):$(tag)'
            - task: KubernetesManifest@1
              displayName: deploying vote
              inputs:
                action: 'deploy'
                namespace: 'default'
                manifests: |
                  $(Pipeline.Workspace)/manifests/vote-deployment.yaml
                  $(Pipeline.Workspace)/manifests/vote-service.yaml
                containers: '$(acrUrl)/$(imgRepoVote):$(tag)'
            - task: KubernetesManifest@1
              displayName: deploying worker
              inputs:
                action: 'deploy'
                namespace: 'default'
                manifests: |
                  $(Pipeline.Workspace)/manifests/worker-deployment.yaml
                containers: '$(acrUrl)/$(imgRepoWorker):$(tag)'


